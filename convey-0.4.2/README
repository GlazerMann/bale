This README file contains notes to orient a developer or maintainer.
For instructions on how to build the conveyor package, see INSTALL.
For an introduction to conveyors and the API documentation, do any
of the following: 

1) Read narrative.h and convey.h
2) Build the package and peruse the pages rooted at ./html/index.html
3) Build and install the package, then point your browser at
   ${prefix}/share/doc/convey/html/index.html, where ${prefix} is the
   root directory of the installation


ARCHITECTURE

Conveyors are implemented in an object-oriented way, as defined by
convey_impl.h and convey.c.  That is, each conveyor is a structure whose
first member is a pointer to a collection of methods, i.e., function
pointers, and whose next few members are common to all conveyors.  Each
subtype of conveyor extends the basic conveyor structure (convey_t) with
additional fields specific to that subtype.  So, for example, a simple
conveyor (simple_t, a type that is not exposed) is a structure whose
first member is a convey_t.

The public operations on conveyors, aside from constructors, are dispatch
functions defined in convey.c.  Most of these functions perform some error
checking before and/or after invoking the appropriate method for the given
conveyor.

The header convey_impl.h that defines the base conveyor "class" is
installed alongside the public header convey.h in order to allow other
packages to define their own types of conveyors.  Client code that merely
makes use of conveyors should not include this header.

Most of the conveyor code is written as if mpp_utilV4 were the substrate.
In UPC mode or raw SHMEM mode, the header file mpp2upc.h or mpp2shmem.h,
respectively, is included to redefine the necessary mpp_util functions in
terms of UPC or SHMEM operations.


PORTERS AND SORTERS

Two types of private, subsidiary objects are worth noting.  The
asynchronous "tensor" and "etensor" conveyors rely on *porters* for
communication (porter.h, porter.c).  The porter API is similar to the
conveyor API but has a few important differences:

 * The set of PEs involved is specified explicitly, via an array of PE
   numbers, when the porter is constructed.

 * The communication pattern can form either a complete graph or a complete
   bipartite graph.

 * Rather than pulling individual items, the client pulls an entire buffer
   of items at once. The client must understand the format of this buffer.

 * Porter methods do very little error checking; they assume the caller has
   done what is needed.

A synchronous "simple" conveyor uses a *sorter* to accelerate the
distribution of incoming items into buffers (sorter.h).  At some point
other conveyors may use them as well.  We have experimented with two types
of sorters: one (sorter.c) that uses a tree of buffers, trying to make the
scatter at each level cache-friendly, and one (circle.c) that uses a small
circular buffer to delay the movement of an item into its buffer until a
prefetch has had some time to complete.  Only the latter type of sorter is
currently in use.

Porters are implemented as objects with their own methods, although many
common operations are handled by the dispatch functions in porter.c.  For
simplicity and speed, sorters are not currently implemented as objects.


TESTING AND BENCHMARKING

The package can build a versatile program called *alltoallv* for
experimenting with conveyors.  This program is the basis for "make check".
Its arguments are the type of conveyor, the *load* (average number of
items) between each pair of PEs, and the item size in bytes.  It also
supports numerous options for controlling the parameters of the conveyor.
It distinguishes between "warmup" iterations, which are not timed but
perform checksums of the items flowing through the conveyor to catch bugs,
and "normal" iterations, which are timed and perform less checking.  By
default, alltoallv performs one warmup iteration and one normal iteration.
In addition to its standard mode which simply measures sustained throughput
of all-to-all communication, it also has a mode that benchmarks the
"indexgather" pattern of communication, in which requests are echoed by
replies carried by a second conveyor.

For more detail, run the program without arguments to see its usage
statement.


PREPARING FOR DISTRIBUTION

Usually 'make distcheck' is wise, instead of 'make dist'.  For this, open
a new shell and define the arguments to the configure script (CC, CFLAGS,
CPPFLAGS, LDFLAGS) as environment variables.  For example:

 % setenv CC cc
 % setenv CFLAGS "-std=gnu99 -g -O2"
 % setenv CPPFLAGS "-I$HOME/opt/include"
 % setenv LDFLAGS "-I$HOME/opt/lib"

Then, starting in the build directory:

 % <srcdir>/configure --prefix=<somewhere>
 % setenv LAUNCH ...
 % make distcheck DISTCHECK_CONFIGURE_FLAGS="--with-mpp --disable-shared"

The result should be a tarball ready for distribution.  See INSTALL for
discussion of how to set the LAUNCH variable.


COPYRIGHT

Copyright (c) 2018, Institute for Defense Analyses,
4850 Mark Center Drive, Alexandria, VA 22311-1882; 703-845-2500.

This material may be reproduced by or for the U.S. Government 
pursuant to the copyright license under the clauses at DFARS 
252.227-7013 and 252.227-7014.
